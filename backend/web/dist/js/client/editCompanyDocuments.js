"use strict";function getDocumentType(t){return t.closest(".document-pjax").data("document-type")}function getCompanyId(t){return t.closest(".document-pjax").data("company-id")}function getPjaxContainerId(t){return t.closest(".document-pjax").attr("id")}function addDocument(){$(".document-file").change(function(t){var e=getDocumentType($(this)),n=$(this).attr("name");documents[e]={file:t.target.files,name:n}})}function getUploadAction(t,e,n){var o=$("#"+e+'[data-document-type="'+t+'"] .document-date').val(),c=$("#"+e+'[data-document-type="'+t+'"] .document-form').attr("action");return o.length>0&&(c+="/"+o),c+="/"+n,c+="/editCompanyDocuments"}function getDocument(t){var e=new FormData;return $.each(documents[t].file,function(n,o){e.append(documents[t].name,o)}),e}function uploadDocument(t,e,n){$.pjax({type:"POST",url:getUploadAction(t,e,n),data:getDocument(t),container:"#"+e,push:!1,scrollTo:!1,cache:!1,processData:!1,contentType:!1})}function submitForm(){$(".document-submit").unbind("click").click(function(){var t=getDocumentType($(this)),e=getCompanyId($(this));uploadDocument(t,getPjaxContainerId($(this)),e)})}function removeDocument(t,e){$.pjax({type:"POST",url:t,container:"#"+e,push:!1,scrollTo:!1})}function deleteDocument(){$(".document-remove").click(function(t){t.preventDefault(),removeDocument($(this).attr("href"),getPjaxContainerId($(this)))})}function showDocumentForm(){$(".document-update").click(function(){var t=getDocumentType($(this)),e=getPjaxContainerId($(this));$("#"+e+'[data-document-type="'+t+'"] .document-form-container').removeClass("hidden")})}function hideDocumentForm(){$(".document-form-close").click(function(){var t=getDocumentType($(this)),e=getPjaxContainerId($(this));$("#"+e+'[data-document-type="'+t+'"] .document-form-container').addClass("hidden")})}var documents={};$(document).on("ready pjax:end",function(){addDocument(),submitForm(),deleteDocument(),showDocumentForm(),hideDocumentForm()}),$(document).on("pjax:success","#document-cmr, #document-eu, #document-im",function(){$.pjax.reload({container:"#document-toastr",timeout:2e3})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
