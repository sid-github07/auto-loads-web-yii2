<?php

namespace common\models;

use backend\controllers\ClientController;
use Yii;
use yii\behaviors\TimestampBehavior;
use yii\data\ActiveDataProvider;
use yii\db\ActiveQuery;
use yii\db\ActiveRecord;
use yii\web\NotFoundHttpException;

/**
 * This is the model class for table "{{%user_service}}".
 *
 * @property integer $id
 * @property integer $old_id
 * @property integer $user_id
 * @property integer $service_id
 * @property integer $paid
 * @property integer $paid_by
 * @property integer $admin_id
 * @property integer $generated_by
 * @property integer $start_date
 * @property integer $end_date
 * @property string $price
 * @property string $response
 * @property integer $created_at
 * @property integer $updated_at
 *
 * @property UserInvoice[] $userInvoices
 * @property Admin $generatedBy
 * @property User $user
 * @property Service $service
 * @property Admin $admin
 * @property CreditCode $creditCode
 */
class UserService extends ActiveRecord
{
    /** @const boolean User service is paid */
    const PAID = true;

    /** @const boolean User service is not paid */
    const NOT_PAID = false;
    
    /** @const integer User service is paid for extended search */
    const SEARCH_PAID = 1;

    /** @const integer User service is not paid for extended search */
    const SEARCH_NOT_PAID = 0;

    /** @const integer Administrator checked that user service is paid */
    const ADMIN = 0;

    /** @const integer User paid for service via PaySera */
    const PAYSERA = 1;

    /** @const integer User paid for service via PayPal */
    const PAYPAL = 2;

    /** @const null Default paid by value */
    const DEFAULT_PAID_BY = null;

    /** @const null Default admin ID value */
    const DEFAULT_ADMIN_ID = null;

    /** @const null User service was generated by user through website */
    const DEFAULT_GENERATED_BY = null;

    /** @const null Default start date value */
    const DEFAULT_START_DATE = null;

    /** @const null Default end date value */
    const DEFAULT_END_DATE = null;

    /** @const integer Number of characters that price can contain before comma or dot */
    const PRICE_PRECISION = 10;

    /** @const integer Number of characters that price can contain after comma or dot */
    const PRICE_SCALE = 2;

    /** @const null Default response value */
    const DEFAULT_RESPONSE = null;

    /** @const integer Maximum number of characters that response can contain */
    const MAX_RESPONSE_LENGTH = 65535;

    /** @const string Model scenario when user buys service */
    const SCENARIO_USER_BUYS_SERVICE = 'user-buys-service';

    /** @const string Model scenario when system marks user service as paid */
    const SCENARIO_SYSTEM_MARKS_AS_PAID = 'system-marks-as-paid';

    /** @const string Model scenario when system sets user service end date */
    const SCENARIO_SYSTEM_SETS_END_DATE = 'system-sets-end-date';

    /** @const string Model scenario when administrator filters planned incomes */
    const SCENARIO_ADMIN_FILTERS_PLANNED_INCOMES = 'admin-filters-planned-incomes';

    /** @const string Model scenario when system saves new subscription */
    const SCENARIO_SYSTEM_SAVES_NEW_SUBSCRIPTION = 'SYSTEM_SAVES_NEW_SUBSCRIPTION';

    /** @const string Model scenario when administrator creates new pre-invoice for company */
    const SCENARIO_ADMIN_CREATES_PRE_INVOICE = 'ADMIN_CREATES_PRE_INVOICE';

    /** @const string Model scenario when system saves new pre-invoice */
    const SCENARIO_SYSTEM_CREATES_PRE_INVOICE = 'SYSTEM_CREATES_PRE_INVOICE';

    /** @const string Model scenario when administrator regenerates user invoice */
    const SCENARIO_ADMIN_REGENERATES_USER_INVOICE = 'ADMIN_REGENERATES_USER_INVOICE';

    /** @const string Model scenario when administrator uses extended search filter to find clients  */
    const SCENARIO_EXTENDED_CLIENT_SEARCH = 'extended-client-search';

    /** @const string Model scenario when system migrates user service data from one database to another */
    const SCENARIO_SYSTEM_MIGRATES_USER_SERVICE_DATA = 'system-migrates-user-service-data';

    const SCENARIO_SYSTEM_MIGRATES_USER_SERVICE = 'system-migrates-user-service';
    
    const SCENARIO_ADMIN_CHANGE_SUBSCRIPTION_END_DATE = 'change-subscription-end-date';
    
    /** @var null|integer Period of time for planned incomes filtration */
    public $period;

    /** @var null|string|integer Planned incomes filtration date range from attribute */
    public $dateFrom;

    /** @var null|string|integer Planned incomes filtration date range to attribute */
    public $dateTo;
    
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%user_service}}';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
        ];
    }
    
    /**
     * @inheritdoc
     */
    public function scenarios()
    {
        return [
            self::SCENARIO_ADMIN_CHANGE_SUBSCRIPTION_END_DATE => [
                'end_date'
            ],
            self::SCENARIO_USER_BUYS_SERVICE => [
                'service_id',
                'response',
                'user_id',
                'paid',
                'paid_by',
                'admin_id',
                'start_date',
                'end_date',
                'price',
            ],
            self::SCENARIO_SYSTEM_MARKS_AS_PAID => [
                'response',
                'paid',
                'paid_by',
                'start_date',
                'end_date',
            ],
            self::SCENARIO_SYSTEM_SETS_END_DATE => [
                'end_date',
            ],
            self::SCENARIO_ADMIN_FILTERS_PLANNED_INCOMES => [
                'end_date',
                'price',
                'period',
                'dateFrom',
                'dateTo',
            ],
            self::SCENARIO_SYSTEM_SAVES_NEW_SUBSCRIPTION => [
                'user_id',
                'service_id',
                'paid',
                'paid_by',
                'admin_id',
                'start_date',
                'end_date',
                'price',
                'response',
            ],
            self::SCENARIO_EXTENDED_CLIENT_SEARCH => [
                'paid'
            ],
            self::SCENARIO_ADMIN_CREATES_PRE_INVOICE => [
                'user_id',
                'service_id',
                'start_date',
            ],
            self::SCENARIO_SYSTEM_CREATES_PRE_INVOICE => [
                'user_id',
                'service_id',
                'paid',
                'paid_by',
                'admin_id',
                'generated_by',
                'start_date',
                'end_date',
                'price',
                'response',
            ],
            self::SCENARIO_ADMIN_REGENERATES_USER_INVOICE => [
                'generated_by',
            ],
            self::SCENARIO_SYSTEM_MIGRATES_USER_SERVICE_DATA => [
                'id',
                'user_id',
                'service_id',
                'paid',
                'paid_by',
                'admin_id',
                'generated_by',
                'start_date',
                'end_date',
                'price',
                'response',
                'created_at',
                'updated_at',
            ],
            self::SCENARIO_SYSTEM_MIGRATES_USER_SERVICE => [
                'id',
                'old_id',
                'user_id',
                'service_id',
                'paid',
                'paid_by',
                'admin_id',
                'generated_by',
                'start_date',
                'end_date',
                'price',
                'response',
                'created_at',
                'updated_at',
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            // Old ID
            ['old_id', 'integer'],
            ['old_id', 'default', 'value' => null],

            // User ID
            ['user_id', 'required', 'message' => Yii::t('app', 'USER_SERVICE_USER_ID_IS_REQUIRED')],
            ['user_id', 'integer', 'message' => Yii::t('app', 'USER_SERVICE_USER_ID_IS_NOT_INTEGER')],
            ['user_id', 'exist', 'targetClass' => User::className(),
                             'targetAttribute' => ['user_id' => 'id'],
                                     'message' => Yii::t('app', 'USER_SERVICE_USER_ID_IS_NOT_EXIST')],

            // Service ID
            ['service_id', 'required', 'message' => Yii::t('app', 'USER_SERVICE_SERVICE_ID_IS_REQUIRED')],
            ['service_id', 'integer', 'message' => Yii::t('app', 'USER_SERVICE_SERVICE_ID_IS_NOT_INTEGER')],
            ['service_id', 'exist', 'targetClass' => Service::className(),
                                'targetAttribute' => ['service_id' => 'id'],
                                        'message' => Yii::t('app', 'USER_SERVICE_SERVICE_ID_IS_NOT_EXIST')],

            ['paid', 'required', 'message' => Yii::t('app', 'USER_SERVICE_PAID_IS_REQUIRED'),
                'except' => self::SCENARIO_EXTENDED_CLIENT_SEARCH],
                                 
            ['paid', 'boolean', 'trueValue' => self::PAID,
                               'falseValue' => self::NOT_PAID,
                                  'message' => Yii::t('app', 'USER_SERVICE_PAID_IS_NOT_BOOLEAN')],
            ['paid', 'in', 'range' => [self::NOT_PAID, self::PAID],
                         'message' => Yii::t('app', 'USER_SERVICE_PAID_IS_NOT_IN_RANGE'),
                         'except' => self::SCENARIO_EXTENDED_CLIENT_SEARCH],
            ['paid', 'in', 'range' => [self::SEARCH_NOT_PAID, self::SEARCH_PAID],
                         'message' => Yii::t('app', 'USER_SERVICE_PAID_IS_NOT_IN_RANGE'),
                         'on' => self::SCENARIO_EXTENDED_CLIENT_SEARCH],

            // Paid by
            ['paid_by', 'integer', 'message' => Yii::t('app', 'USER_SERVICE_PAID_BY_IS_NOT_INTEGER')],
            ['paid_by', 'in', 'range' => self::getPaidByMethods(),
                            'message' => Yii::t('app', 'USER_SERVICE_PAID_BY_IS_NOT_IN_RANGE')],
            ['paid_by', 'default', 'value' => self::DEFAULT_PAID_BY],

            // Admin ID
            ['admin_id', 'integer', 'message' => Yii::t('app', 'USER_SERVICE_ADMIN_ID_IS_NOT_INTEGER')],
            ['admin_id', 'default', 'value' => self::DEFAULT_ADMIN_ID],
            ['admin_id', 'exist', 'targetClass' => Admin::className(),
                              'targetAttribute' => ['admin_id' => 'id'],
                                      'message' => Yii::t('app', 'USER_SERVICE_ADMIN_ID_NOT_EXIST')],

            // Generated by
            ['generated_by', 'integer', 'message' => Yii::t('app', 'USER_SERVICE_GENERATED_BY_IS_NOT_INTEGER')],
            ['generated_by', 'default', 'value' => self::DEFAULT_GENERATED_BY],
            ['generated_by', 'exist', 'targetClass' => Admin::className(),
                                  'targetAttribute' => ['generated_by' => 'id'],
                                          'message' => Yii::t('app', 'USER_SERVICE_GENERATED_BY_NOT_EXIST')],

            // Start date
            ['start_date', 'required', 'message' => Yii::t('app', 'USER_SERVICE_START_DATE_IS_REQUIRED'),
                                            'on' => self::SCENARIO_ADMIN_CREATES_PRE_INVOICE],
            ['start_date', 'integer', 'message' => Yii::t('app', 'USER_SERVICE_START_DATE_IS_NOT_INTEGER'),
                                       'except' => self::SCENARIO_ADMIN_CREATES_PRE_INVOICE,
                                           'on' => self::SCENARIO_SYSTEM_CREATES_PRE_INVOICE],
            ['start_date', 'default', 'value' => self::DEFAULT_START_DATE],
            ['start_date', 'string', 'message' => Yii::t('app', 'USER_SERVICE_START_DATE_IS_NOT_STRING'),
                                          'on' => self::SCENARIO_ADMIN_CREATES_PRE_INVOICE,
                                      'except' => self::SCENARIO_SYSTEM_CREATES_PRE_INVOICE],
            ['start_date', 'date', 'format' => 'php:Y-m-d',
                                  'message' => Yii::t('app', 'USER_SERVICE_START_DATE_INVALID_FORMAT', [
                                      'example' => date('Y-m-d'),
                                  ]),
                                       'on' => self::SCENARIO_ADMIN_CREATES_PRE_INVOICE,
                                   'except' => self::SCENARIO_SYSTEM_CREATES_PRE_INVOICE],

            // End date
            ['end_date', 'integer', 'message' => Yii::t('app', 'USER_SERVICE_END_DATE_IS_NOT_INTEGER'),
                                     'except' => self::SCENARIO_ADMIN_FILTERS_PLANNED_INCOMES,
                                         'on' => self::SCENARIO_SYSTEM_CREATES_PRE_INVOICE],
            ['end_date', 'string', 'message' => Yii::t('app', 'USER_SERVICE_END_DATE_IS_NOT_STRING'),
                                        'on' => self::SCENARIO_ADMIN_FILTERS_PLANNED_INCOMES,
                                    'except' => self::SCENARIO_SYSTEM_CREATES_PRE_INVOICE],
            ['end_date', 'date', 'format' => 'php:Y-m-d',
                                'message' => Yii::t('app', 'USER_SERVICE_END_DATE_INVALID_FORMAT', [
                                    'example' => date('Y-m-d'),
                                ]),
                                     'on' => self::SCENARIO_ADMIN_FILTERS_PLANNED_INCOMES,
                                 'except' => self::SCENARIO_SYSTEM_CREATES_PRE_INVOICE],
            ['end_date', 'default', 'value' => self::DEFAULT_END_DATE],

            // Price
            ['price', 'required', 'message' => Yii::t('app', 'USER_SERVICE_PRICE_IS_REQUIRED'),
                                   'except' => self::SCENARIO_ADMIN_FILTERS_PLANNED_INCOMES],
            ['price', 'match', 'pattern' => '/^\d{1,8}(?:(\.|\,)\d{1,2})?$/',
                               'message' => Yii::t('app', 'USER_SERVICE_PRICE_IS_NOT_MATCH')],

            // Response
            ['response', 'default', 'value' => self::DEFAULT_RESPONSE],
            ['response', 'string', 'max' => self::MAX_RESPONSE_LENGTH,
                               'tooLong' => Yii::t('app', 'USER_SERVICE_RESPONSE_IS_TOO_LONG', [
                                   'length' => self::MAX_RESPONSE_LENGTH,
                               ]),
                               'message' => Yii::t('app', 'USER_SERVICE_RESPONSE_IS_NOT_STRING')],

            // Created at
            ['created_at', 'integer', 'message' => Yii::t('app', 'USER_SERVICE_CREATED_AT_IS_NOT_INTEGER')],

            // Updated at
            ['updated_at', 'integer', 'message' => Yii::t('app', 'USER_SERVICE_UPDATED_AT_IS_NOT_INTEGER')],

            // Period
            ['period', 'integer', 'message' => Yii::t('app', 'USER_SERVICE_PERIOD_IS_NOT_INTEGER')],
            ['period', 'in', 'range' => array_keys(UserInvoice::getTranslatedPeriods()),
                           'message' => Yii::t('app', 'USER_SERVICE_PERIOD_IS_NOT_IN_RANGE')],

            // Date form
            ['dateFrom', 'string', 'message' => Yii::t('app', 'USER_SERVICE_DATE_FROM_IS_NOT_STRING')],
            ['dateFrom', 'date', 'format' => 'php:Y-m-d',
                                'message' => Yii::t('app', 'USER_SERVICE_DATE_FROM_INVALID_FORMAT', [
                                    'example' => date('Y-m-d'),
                                ])],
            ['dateFrom', 'validateDateRange', 'params' => [
                'emptyMessage' => Yii::t('app', 'USER_SERVICE_DATE_FROM_EMPTY_DATES'),
                'invalidMessage' => Yii::t('app', 'USER_SERVICE_DATE_FROM_IS_INVALID'),
            ]],

            // Date to
            ['dateTo', 'string', 'message' => Yii::t('app', 'USER_SERVICE_DATE_TO_IS_NOT_STRING')],
            ['dateTo', 'date', 'format' => 'php:Y-m-d',
                              'message' => Yii::t('app', 'USER_SERVICE_DATE_TO_INVALID_FORMAT', [
                                  'example' => date('Y-m-d'),
                              ])],
            ['dateTo', 'validateDateRange', 'params' => [
                'emptyMessage' => Yii::t('app', 'USER_SERVICE_DATE_TO_EMPTY_DATES'),
                'invalidMessage' => Yii::t('app', 'USER_SERVICE_DATE_TO_IS_INVALID'),
            ]],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'user_id' => Yii::t('app', 'USER_SERVICE_USER_ID_LABEL'),
            'service_id' => Yii::t('app', 'USER_SERVICE_SERVICE_ID_LABEL'),
            'paid' => Yii::t('app', 'USER_SERVICE_PAID_LABEL'),
            'paid_by' => Yii::t('app', 'USER_SERVICE_PAID_BY_LABEL'),
            'admin_id' => Yii::t('app', 'USER_SERVICE_ADMIN_ID_LABEL'),
            'generated_by' => Yii::t('app', 'USER_SERVICE_GENERATED_BY_LABEL'),
            'start_date' => Yii::t('app', 'USER_SERVICE_START_DATE_LABEL'),
            'end_date' => Yii::t('app', 'USER_SERVICE_END_DATE_LABEL'),
            'price' => Yii::t('app', 'USER_SERVICE_PRICE_LABEL'),
            'response' => Yii::t('app', 'USER_SERVICE_RESPONSE_LABEL'),
            'created_at' => Yii::t('app', 'USER_SERVICE_CREATED_AT_LABEL'),
            'updated_at' => Yii::t('app', 'USER_SERVICE_UPDATED_AT_LABEL'),
        ];
    }

    /**
     * Validates date range attribute
     *
     * @param string $attribute Date range attribute name
     * @param array $params The value of the "params" in rule
     * @return boolean
     */
    public function validateDateRange($attribute, $params = [])
    {
        if (empty($this->dateFrom) || empty($this->dateTo)) {
            $this->addError($attribute, isset($params['emptyMessage']) ? $params['emptyMessage'] : '');
            return true;
        }

        if ($this->dateFrom > $this->dateTo) {
            $this->addError($attribute, isset($params['invalidMessage']) ? $params['invalidMessage'] : '');
            return true;
        }

        return true;
    }

    /**
     * @return ActiveQuery
     */
    public function getUserInvoices()
    {
        return $this->hasMany(UserInvoice::className(), ['user_service_id' => 'id']);
    }

    /**
     * @return ActiveQuery
     */
    public function getGeneratedBy()
    {
        return $this->hasOne(Admin::className(), ['id' => 'generated_by']);
    }

    /**
     * @return ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::className(), ['id' => 'user_id']);
    }

    /**
     * @return ActiveQuery
     */
    public function getService()
    {
        return $this->hasOne(Service::className(), ['id' => 'service_id']);
    }

    /**
     * @return ActiveQuery
     */
    public function getAdmin()
    {
        return $this->hasOne(Admin::className(), ['id' => 'admin_id']);
    }

    /**
     * @return ActiveQuery
     */
    public function getCreditCode()
    {
        return $this->hasOne(CreditCode::className(), ['user_service_id' => 'id']);
    }

    /**
     * Returns all methods how user service can be paid
     *
     * @return array
     */
    public static function getPaidByMethods()
    {
        return [self::ADMIN, self::PAYSERA, self::PAYPAL];
    }

    /**
     * Returns translated paid by methods
     *
     * @return array
     */
    public static function getTranslatedPaidByMethods()
    {
        return [
            self::ADMIN => Yii::t('app', 'ADMIN'),
            self::PAYSERA => Yii::t('app', 'PAYSERA'),
            self::PAYPAL => Yii::t('app', 'PAYPAL'),
        ];
    }

    /**
     * Returns translated paid methods
     *
     * @return array
     */
    public static function getTranslatedPaidMethods()
    {
        return [
            self::PAID => Yii::t('app', 'PAID'),
            self::NOT_PAID => Yii::t('app', 'NOT_PAID'),
        ];
    }

    /**
     * Returns all methods how user service can be paid by user
     *
     * @return array
     */
    public static function getUserPaidByMethods()
    {
        return [self::PAYSERA, self::PAYPAL];
    }

    /**
     * Returns all methods how user service can be paid by admin
     *
     * @return array
     */
    public static function getAdminPaidByMethods()
    {
        return [self::ADMIN];
    }

    /**
     * Finds user service by provided user service ID
     *
     * @param null|integer $id User service ID
     * @return array|self
     * @throws NotFoundHttpException If user service model not found
     */
    public static function findById($id = null)
    {
        $model = self::find()
                ->joinWith('userInvoices')
                ->where([self::tableName() . '.id' => $id])
                ->one();
        if (is_null($model)) {
            throw new NotFoundHttpException(Yii::t('alert', 'NOT_FOUND_USER_SERVICE_BY_ID'));
        }
        return $model;
    }

    /**
     * Creates new user service entry
     *
     * @param Service $service User service
     * @param boolean $byAdmin Attribute, whether administrator is assigning service to user
     * @param null|integer $userId User ID that service must be assigned
     * @return boolean|UserService
     */
    public static function create(Service $service, $byAdmin = false, $userId = null)
    {
        $userService = new self(['scenario' => self::SCENARIO_USER_BUYS_SERVICE]);
        $userService->service_id = $service->id;
        $userService->response = self::DEFAULT_RESPONSE;
        ($byAdmin) ? $userService->setAttributesByAdmin($userId) : $userService->setAttributesByUser();
        $userService->price = $service->price;
        if (!$byAdmin && $service->service_type_id == ServiceType::CREDITCODE_TYPE_ID) {
            $userService->user_id = $userId;
        }
        if ($userService->save()) {
            return $userService;
        }
        return false;
    }

    /**
     * Fills user service model attributes with values, when user orders service by itself
     */
    private function setAttributesByUser()
    {
        $this->setAttribute('user_id', Yii::$app->getUser()->getId());
        $this->setAttribute('paid', self::NOT_PAID);
        $this->setAttribute('paid_by', self::DEFAULT_PAID_BY);
        $this->setAttribute('admin_id', self::DEFAULT_ADMIN_ID);
        $this->setAttribute('start_date', self::DEFAULT_START_DATE);
        $this->setAttribute('end_date', self::DEFAULT_END_DATE);
    }

    /**
     * Fills user service model attributes with values, when admin assigns new service for user
     * @param null|integer $userId User ID that service must be assigned
     */
    private function setAttributesByAdmin($userId)
    {
        $this->setAttribute('user_id', $userId);
        $this->setAttribute('paid', self::PAID);
        $this->setAttribute('paid_by', self::ADMIN);
        // TODO: kai bus admin lentelė, čia turi būti dabar prisijungusio admin ID
        $this->setAttribute('admin_id', self::DEFAULT_ADMIN_ID);
        $this->setAttribute('start_date', time());
        $this->setAttribute('end_date', time());
    }

    /**
     * Checks whether user is current user service owner
     *
     * @param null|integer $userId User ID
     * @return boolean
     */
    public function isUserServiceOwner($userId = null)
    {
        if (is_null($userId)) {
            $userId = Yii::$app->getUser()->getId();
        }
        return $this->user_id == $userId;
    }

    /**
     * Checks whether user service payment method is valid
     *
     * @param null|integer $method User service payment method
     * @param boolean $byAdmin Attribute, whether administrator is assigning service to user
     * @return boolean
     */
    public static function isMethodValid($method = null, $byAdmin = false)
    {
        $methods = self::getUserPaidByMethods();
        if ($byAdmin) {
            $methods = self::getAdminPaidByMethods();
        }
        return in_array($method, $methods);
    }

    /**
     * Checks whether user service is paid
     *
     * @return boolean
     */
    public function isPaid()
    {
        return $this->paid == self::PAID;
    }

    /**
     * Validates whether current user service price ir equal to given price
     *
     * @param null|double $price Target price
     * @return boolean
     */
    public function isPriceValid($price = null)
    {
        return $this->price == $price;
    }

    /**
     * Makes user service paid
     *
     * @param string $response JSON encoded response from payment
     * @param integer $method
     * @param $activeService
     * @return boolean Whether user service successfully marked as paid
     */
    public function markAsPaid($response, $method, $activeService = null)
    {        
        $this->start_date = time();
        $this->calculateServiceEndDate();
        if (!is_null($activeService)) {
            $this->start_date = self::findLastEndDate($this->user_id)->end_date;
            $this->calculateServiceEndDate();
        }
        $this->response = $response;
        $this->paid = self::PAID;
        $this->paid_by = $method;
        $this->scenario = self::SCENARIO_SYSTEM_MARKS_AS_PAID;
        return $this->save();
    }

    /**
     * Converts give price from euros to cents
     *
     * @param double $price Price that needs to be converted
     * @return integer
     */
    public static function convertToCents($price = 0.00)
    {
        return round($price * 100, 0);
    }

    /**
     * Converts give price from cents to euros
     *
     * @param double $price Price that needs to be converted
     * @return double
     */
    public static function convertToEuros($price = 0.00)
    {
        return number_format($price / 100, 2);
    }
    
    /**
     * Calculates and returns brutto price
     * 
     * @return float|null $bruttoPrice Brutto price
     */
    public function getBruttoPrice()
    {
        foreach ($this->userInvoices as $userInvoice) {
            $vat = (float) $userInvoice->vat;
            $nettoPrice = (float) $userInvoice->netto_price;
            return round($nettoPrice + ($nettoPrice * $vat / 100), 2);
        }
        return null;
    }
    
    /**
     * Returns list of translated paid subscription options, extended search
     *
     * @return array
     */
    public function getTranslatedSubscriptionOptions()
    {
        return [
            self::SEARCH_PAID => Yii::t('app', 'COMPANY_SUBSCRIPTION_HAD'),
            self::SEARCH_NOT_PAID => Yii::t('app', 'COMPANY_NO_SUBSCRIPTION'),
        ];
    }

    /**
     * Administrator marks user service as paid
     */
    public function markAsPaidByAdmin()
    {
        $this->paid = self::PAID;
        $this->paid_by = self::ADMIN;
        $this->admin_id = Yii::$app->admin->id;
    }

    /**
     * Returns all filtration date ranges
     *
     * @return array
     */
    public function getFiltrationDateRanges()
    {
        $periodInterval = UserInvoice::getPeriodDateRange($this->period);
        list($periodStart, $periodEnd) = UserInvoice::convertToTimestamp($periodInterval);
        list($endDateStart, $endDateEnd) = UserInvoice::convertToTimestamp([$this->end_date, $this->end_date]);
        list($dateFrom, $dateTo) = UserInvoice::convertToTimestamp([$this->dateFrom, $this->dateTo]);

        return compact('periodStart', 'periodEnd', 'endDateStart', 'endDateEnd', 'dateFrom', 'dateTo');
    }

    /**
     * Returns query for bill list data provider
     *
     * @param Company $company Company model
     * @param UserInvoice $userInvoice User invoice model
     * @param array $dates List of filtration date ranges
     * @return ActiveQuery
     */
    public function getPlannedIncomeQuery(Company $company, UserInvoice $userInvoice, $dates)
    {
        $onlyPaid = self::find()->where(['paid' => self::PAID]);
        return self::find()
            ->from(['onlyPaid' => $onlyPaid])
            ->joinWith('user.companies as ownerCompany')
            ->joinWith('user.companyUser')
            ->joinWith('user.companyUser.company as userCompany')
            ->joinWith('userInvoices')
            ->filterWhere(['between', 'end_date', $dates['endDateStart'], $dates['endDateEnd']])
            ->orFilterWhere(['between', 'end_date', $dates['periodStart'], $dates['periodEnd']])
            ->orFilterWhere(['between', 'end_date', $dates['dateFrom'], $dates['dateTo']])
            ->andFilterWhere([
                'or',
                ['like', 'ownerCompany.title', $company->title],
                ['like', 'ownerCompany.name', $company->title],
                ['like', 'ownerCompany.surname', $company->title],
                ['like', 'userCompany.title', $company->title],
                ['like', 'userCompany.name', $company->title],
                ['like', 'userCompany.surname', $company->title],
            ])
            ->andFilterWhere(['like', UserInvoice::tableName() . '.number', $userInvoice->number])
            ->andFilterWhere(['onlyPaid.price' => $this->price])
            ->groupBy('onlyPaid.id');
    }

    /**
     * Returns planned income list data provider
     *
     * @param ActiveQuery $query Planned income data provider query
     * @return ActiveDataProvider
     */
    public function getAdminDataProvider($query)
    {
        return new ActiveDataProvider([
            'query' => $query,
            'sort' => false,
        ]);
    }

    /**
     * Calculates number of days remaining
     */
    public function countRemainingDays()
    {
        $timeLeft = $this->end_date - time();
        $dayInSeconds = 60 * 60 * 24;
        $hourInSeconds = 60 * 60;
        $daysLeft = floor($timeLeft / $dayInSeconds);
        $hoursLeft = round(($timeLeft - $daysLeft * $dayInSeconds) / $hourInSeconds);

        return [$daysLeft, $hoursLeft];
    }

    /**
     * Calculates amount of planned incomes
     *
     * @param array $userServices List of user services models
     * @return float
     */
    public static function calculatePlannedIncome($userServices)
    {
        $amount = 0.00;
        foreach ($userServices as $userService) {
            $amount += (float) $userService->price;
        }

        return (float) $amount;
    }

    /**
     * Fixes period conflict with other date filters
     */
    public function fixPeriodDateConflict()
    {
        if (!empty($this->end_date) || !empty($this->dateFrom) || !empty($this->dateTo)) {
            $this->period = null;
        } else {
            $this->period = $this->period ? $this->period : UserInvoice::THIS_MONTH_BEGINNING;
        }
    }

    /**
     * Converts date ranges to human readable text
     *
     * @param array $dateRanges List of date ranges
     * @return string
     */
    public static function convertDateRangesToText($dateRanges)
    {
        $endDateText = self::getDateTextFromDateRange($dateRanges, 'endDateStart', 'endDateEnd');
        $periodText = self::getDateTextFromDateRange($dateRanges, 'periodStart', 'periodEnd');
        $dateRangeText = self::getDateTextFromDateRange($dateRanges, 'dateFrom', 'dateTo');

        $text = empty($endDateText) ? "" : "$endDateText {Yii::t('app', 'AND')}";
        $text .= empty($periodText) ? "" : "$periodText {Yii::t('app', 'AND')}";
        $text .= empty($dateRangeText) ? "" : "$dateRangeText {Yii::t('app', 'AND')}";

        return rtrim($text, " {Yii::t('app', 'AND')} ");
    }

    /**
     * Returns date text from date range
     *
     * @param array $dateRanges List of date ranges
     * @param string $startKey Array key for date range start
     * @param string $endKey Array key for date range end
     * @return string
     */
    private static function getDateTextFromDateRange($dateRanges, $startKey, $endKey)
    {
        if (is_null($dateRanges[$startKey]) || is_null($dateRanges[$endKey])) {
            return '';
        }

        return Yii::t('element', 'A-C-465', [
            'dateFrom' => date('Y-m-d', $dateRanges[$startKey]),
            'dateTo' => date('Y-m-d', $dateRanges[$endKey]),
        ]);
    }

    /**
     * Finds and returns all company payments
     *
     * @param null|integer $companyId Company ID
     * @param null|string $year Selected company payments year
     * @return ActiveDataProvider
     */
    public static function getCompanyPaymentsDataProvider($companyId, $year)
    {
        $beginningOfTheYear = strtotime($year . '-01-01');
        $endOfTheYear = strtotime($year . '-12-31');

        $query = self::find()
            ->distinct()
            ->joinWith('service')
            ->joinWith('user')
            ->joinWith('user.userServiceActives')
            ->joinWith('user.companyUser')
            ->joinWith('user.companyUser.company AS userCompany')
            ->joinWith('user.companies AS ownerCompany')
            ->filterWhere([
                'or',
                ['ownerCompany.id' => $companyId],
                ['userCompany.id' => $companyId],
            ])
            ->andFilterWhere([
                'between',
                self::tableName() . '.created_at',
                $beginningOfTheYear,
                $endOfTheYear,
            ])
            ->orderBy(['paid' => SORT_ASC]);

        return new ActiveDataProvider([
            'query' => $query,
            'sort' => false,
            'pagination' => [
                'page' => (Yii::$app->request->get('page') - 1),
                'params' => ['tab' => ClientController::TAB_COMPANY_PAYMENTS, 'id' => Yii::$app->request->get('id')],
            ]
        ]);
    }

    /**
     * Returns invoice ID or null if user service does not have invoice
     *
     * @return integer|null
     */
    public function getInvoiceId()
    {
        foreach ($this->userInvoices as $userInvoice) {
            if ($userInvoice->isInvoice()) {
                return $userInvoice->id;
            }
        }

        return null;
    }

    /**
     * Returns user invoice model or null if invoice not found
     *
     * @return UserInvoice|null
     */
    public function getInvoice()
    {
        foreach ($this->userInvoices as $userInvoice) {
            if ($userInvoice->isInvoice()) {
                return $userInvoice;
            }
        }

        return null;
    }

    /**
     * Returns pre-invoice ID or null if user service does not have pre-invoice
     *
     * @return integer
     */
    public function getPreInvoiceId()
    {
        foreach ($this->userInvoices as $userInvoice) {
            if ($userInvoice->isPreInvoice()) {
                return $userInvoice->id;
            }
        }

        return null;
    }

    /**
     * Returns user pre-invoice model or null if pre-invoice not found
     *
     * @return UserInvoice|null
     */
    public function getPreInvoice()
    {
        foreach ($this->userInvoices as $userInvoice) {
            if ($userInvoice->isPreInvoice()) {
                return $userInvoice;
            }
        }

        return null;
    }

    /**
     * Returns who generated the invoice or pre-invoice
     *
     * @return string
     */
    public function getWhoGenerated()
    {
        if ($this->isGeneratedThroughPage()) {
            return Yii::t('app', 'THROUGH_PAGE');
        }

        if (is_null($this->generated_by)) {
            return Yii::t('yii', '(not set)');
        }

        $name = $this->generatedBy->getNameAndSurname();
        $id = $this->generatedBy->id;
        return "$name (ID: $id)";
    }

    /**
     * Checks whether invoice was generated through page
     *
     * @return boolean
     */
    public function isGeneratedThroughPage()
    {
        return $this->generated_by === self::DEFAULT_GENERATED_BY;
    }

    /**
     * Converts user service start date from string to timestamp
     */
    public function convertStartDateToTimestamp()
    {
        $this->start_date = strtotime($this->start_date);
    }

    /**
     * Calculates user service end date time
     */
    public function calculateEndDateFromService()
    {
        $days = $this->service->days;
        $text = $days == 1 ? 'day' : 'days';
        $this->end_date = strtotime($this->start_date . " + $days $text");
    }
    
    /**
     * Calculates user service end date time
     */
    public function calculateServiceEndDate()
    {
        $days = $this->service->days;
        $text = $days == 1 ? ' day' : ' days';
        $this->end_date = strtotime(" + " . $days . $text, $this->start_date);
    }

    /**
     * Sets user service price from service
     */
    public function setPriceFromService()
    {
        $this->price = $this->service->price;
    }

    /**
     * Checks whether user service was paid by administrator
     *
     * @return boolean
     */
    public function isPaidByAdmin()
    {
        return $this->paid_by == self::ADMIN;
    }
    
    /**
     * Finds last end date
     * 
     * @param int $userId user id
     * @return ActiveRecord
     */
    public static function findLastEndDate($userId)
    {
        $adminServices =  self::find()
            ->joinWith('service')
            ->where([
                'user_id' => $userId,
                'paid' => self::PAID,
                Service::tableName() . '.service_type_id' => ServiceType::MEMBER_TYPE_ID,    
            ])
            ->andWhere(['not', ['admin_id' => null]])
            ->orderBy(['created_at' => SORT_DESC])
            ->one();
        
        $userServices =  self::find()
            ->joinWith('service')
            ->where([
                'user_id' => $userId,
                'paid' => self::PAID,
                Service::tableName() . '.service_type_id' => ServiceType::MEMBER_TYPE_ID,    
            ])
            ->andWhere(['admin_id' => null])
            ->orderBy(['created_at' => SORT_DESC])
            ->one();
        
        if (is_null($adminServices)) {
            return $userServices;
        }
        
        if (is_null($userServices)) {
            return $adminServices;
        }
        
        if ($adminServices->end_date > $userServices->end_date) {
            return $adminServices;
        } else {
            return $userServices;
        }
    }
    
    /**
     * Gets available subscriptions from database purchase history
     * 
     * @return array
     */
    public static function getAvailableSubscriptions() 
    {
        return self::find()
            ->joinWith('service')
            ->where(['<', 'start_date', time()])
            ->andWhere(['>', 'end_date', time()])
            ->andWhere([
                Service::tableName(). '.service_type_id' => ServiceType::MEMBER_TYPE_ID,
                'paid' => UserService::PAID,
                ])
            ->all();
    }
	
	/**
     * Returns active data provider for company subscription history
     *
     * @param null|integer $companyId Company ID
     * @param null|integer $year Selected subscription year
     * @return ActiveDataProvider
     */
    public static function getCompanySubscriptionsHistoryDataProvider($companyId, $year)
    {
        $beginningOfTheYear = strtotime($year . '-01-01');
        $endOfTheYear = strtotime($year . '-12-31');
        $query = self::find()
            ->joinWith('user')
            ->joinWith('user.companies AS ownerCompany')
            ->joinWith('user.companyUser')
            ->joinWith('user.companyUser.company AS userCompany')
            ->filterWhere([
                'or',
                ['ownerCompany.id' => $companyId],
                ['userCompany.id' => $companyId],
            ])
            ->andWhere(['paid' => UserService::PAID])
            ->andFilterWhere([
                'between',
                self::tableName() . '.created_at',
                $beginningOfTheYear,
                $endOfTheYear,
            ]);

        return new ActiveDataProvider([
            'query' => $query,
            'sort' => [
                'defaultOrder' => [
                    'user_id' => SORT_ASC,
                    'created_at' => SORT_DESC,
                ],
            ],
            'pagination' => [
                'page' => (Yii::$app->request->get('secondPage') - 1),
                'pageSize' => '15',
                'pageParam' => 'secondPage',
                'params' => ['tab' => ClientController::TAB_COMPANY_SUBSCRIPTIONS, 'id' => Yii::$app->request->get('id')],
            ]
        ]);
    }
	
    /*
     * Finds history subscription item ehich may be active subscription
     */
    public function findActiveSubscription()
    {
        $active = UserServiceActive::find()
            ->where(['user_id' => $this->user_id, 'end_date' => $this->end_date])
            ->count();
        if ($active) {
            return true;
        }
        return false;
    }
}
